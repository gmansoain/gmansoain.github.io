openapi: 3.0.3
info:
  title: Gon Products API
  description: |
    # About Us
    **EazyShop** is an open market product selling company. Any website can list our products by using our _APIs_. Shipping and other logistics will be taken care by us. You will get an `Affiliate Commision` for selling our products.

    # Categories Supported
      - Mobiles
        - Apple
        - Samsung
        - OnePlus
      - Laptops
      - Televisions
      - Headphones
      
    ```
    method1(){
    ...
    }
    ```
  termsOfService: https://eazyshop.com/terms/
  x-custom-info:
    comment: Some comment
    developers:
      - name: Gonzalo Marcos
        email: gmansoain@gmail.com
      - name: Gon
        email: gmarcos@salesforce.com
  contact:
    name: API Support
    url: https://www.eazyshop.com/support
    email: support@eazyshop.com
  license:
    name: EazyShop License
    url: https://www.eazyshop.com/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: External Documentation
  url: http://example.com
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
  - url: https://{username}.server.com:{port}/{version}
    variables:
      username:
        default: demo
        description: This value is assigned by the service provider
      port:
        enum:
          - "8443"
          - "443"
        default: "8443"
      version:
        default: v1

tags:
  - name: Categories
    description: Categories-related operations
  - name: Products
    description: Products-related operations
  - name: Orders
    description: Orders-related operations

security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - oAuth2AuthCode:
      - read
      - write
      - admin

paths:
  /categories:
    get:
      summary: Return List of Categories
      description: Returns the list of categories supported by EazyShop
      operationId: getCategories
      security:
        - BasicAuth: []
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          examples:
            mobiles:
              summary: Mobiles
              value: 101
            laptops:
              summary: Laptops
              value: 102
            headphones:
              summary: Headphones
              value: 103
            televisions:
              summary: Televisions
              value: 104
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
              examples:
                all-categories-data:
                  summary: Categories Data Example
                  value:
                    - categoryId: 101
                      name: Mobiles
                    - categoryId: 102
                      name: Laptops
                    - categoryId: 103
                      name: Headphones
                    - categoryId: 104
                      name: Televisions
                single-category-data:
                  summary: Single category example data
                  value:
                    - categoryId: 101
                      name: Mobiles
        "500":
          $ref: "#/components/responses/InternalServerError"
  /categories/{categoryId}:
    get:
      summary: Return category details
      description: Returns the category details from EazyShop
      operationId: getCategoryDetails
      security: []
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 102
      responses:
        "200":
          description: Return category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /products:
    get:
      summary: Return List of Products
      description: Return List of Products from EazyShop
      operationId: getProducts
      tags:
        - Products
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 101
      responses:
        "200":
          description: A List of Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                products-data:
                  summary: Products example data
                  value:
                    - productId: 101
                      name: Apple IPhone 13 Pro
                      price: 999.00
                      categoryName: Mobiles
                      quantity: 96
                    - productId: 102
                      name: Samsung S22 Ultra
                      price: 899.00
                      categoryName: Mobiles
                      quantity: 121
                    - productId: 103
                      name: OnePlus 10 Pro 5G
                      price: 750.00
                      categoryName: Mobiles
                      quantity: 67
        "500":
          $ref: "#/components/responses/InternalServerError"
  /products/{productId}:
    get:
      summary: Return product details
      description: |
        Returns the product details from  EazyShop
      operationId: getProductDetails
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 101
      responses:
        "200":
          description: Return product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /orders:
    get:
      summary: Get Order Details
      description: Get Order details from EazyShop
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:
        "200":
          description: Fetch order details successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    orderId:
                      type: integer
                    products:
                      type: array
                      items:
                        $ref: "#/components/schemas/Product"
                    address:
                      $ref: "#/components/schemas/Address"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create New Order
      description: |
        Post order details to EazyShop for processing
        and shipping
      operationId: saveOrderDetails
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
          links:
            GetOrderByOrderId:
              $ref: "#/components/links/GetOrderByOrderId"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update Order Details
      description: |
        Update order details to EazyShop for processing
        and
      operationId: updateOrderDetails
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                products:
                  $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: Order details updated successfully
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete Order
      description: Delete order details from EazyShop
      operationId: deleteOrderDetails
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:
        "204":
          description: Order details cancelled successfully
        "500":
          $ref: "#/components/responses/InternalServerError"

  /orders/{orderId}:
    get:
      summary: Get Order Details
      description: Get Order details from EazyShop
      deprecated: true
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/orderIdPathParam"
      responses:
        "200":
          description: Fetch order details successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    orderId:
                      type: integer
                    products:
                      type: array
                      items:
                        $ref: "#/components/schemas/Product"
                    address:
                      $ref: "#/components/schemas/Address"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /oneOfOrder: #example of Polymorphism with One Of property
    post:
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: object
                  oneOf:
                    - $ref: "#/components/schemas/Mobile"
                    - $ref: "#/components/schemas/Laptop"
                address:
                  $ref: "#/components/schemas/Address"
              required:
                - products
                - address
      responses:
        "201":
          description: Order placed successfully
  /anyOfOrder: #example of Polymorphism with Any Of property
    get:
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
        - name: fetchType
          in: query
          required: true
          schema:
            type: string
            enum:
              - summary
              - details
          description: >
            Fetch Type:
              * `summary` - Will provide Order Summary
              * `details` - Will provide Order Summary & Order Address
      responses:
        "200":
          description: Return order info
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/OrderSummary"
                  - $ref: "#/components/schemas/OrderAddress"

components:
  parameters:
    orderIdQueryParam:
      name: orderId
      in: query
      required: true
      schema:
        type: integer
    orderIdPathParam:
      name: orderId
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Address:
      type: object
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
          enum:
            - California
            - Texas
            - Indiana
            - NewYork
        zipcode:
          type: string
        isOfficeAddress:
          type: boolean
      required: [addressLine, city, state, zipcode]
    Product:
      type: object
      properties:
        productId:
          type: integer
        name:
          type: string
        price:
          type: number
          format: float
        categoryName:
          type: string
          nullable: true
        releaseDate:
          type: string
          format: date
          readOnly: true
        quantity:
          type: integer
          description: |
            ***Quantity*** represents `stock` value when this field is being sent by EazyShop.Where as in the scenarios of consumer sending this feild, it represents `number of product items` inside the order. Consumers are expected to handle the scenario of stopping the end user <u>*when the stock value is 0*</u>
    Mobile: #example of Inheritance
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            networkType:
              type: string
              enum:
                - 4G
                - 5G
          required: [networkType]
    Laptop: #example of Inheritance
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            ram:
              type: string
              enum:
                - 8 GB
                - 16 GB
                - 24 GB
          required: [ram]

    Category:
      type: object
      properties:
        categoryId:
          type: integer
        name:
          type: string
    OrderSummary:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    OrderAddress:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
  responses:
    InternalServerError:
      description: |
        An error occured while processing the request.
  links:
    GetOrderByOrderId:
      description: |
        The `orderId` value returned in the response can be used as input parameter in `GET /orders`
      operationId: getProductDetails
      parameters:
        orderId: "$response.body#/orderId"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    oAuth2AuthCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Read Only Access
            write: Read and Write Access
            admin: Full Access
